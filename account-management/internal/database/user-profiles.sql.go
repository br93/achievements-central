// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: user-profiles.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUserProfile = `-- name: CreateUserProfile :one
INSERT INTO tb_user_profiles (user_id, steam_user, gog_user)
VALUES ($1, $2, $3)
RETURNING id, user_id, steam_user, gog_user, created_at, updated_at, deleted_at
`

type CreateUserProfileParams struct {
	UserID    uuid.UUID
	SteamUser sql.NullString
	GogUser   sql.NullString
}

func (q *Queries) CreateUserProfile(ctx context.Context, arg CreateUserProfileParams) (TbUserProfile, error) {
	row := q.db.QueryRowContext(ctx, createUserProfile, arg.UserID, arg.SteamUser, arg.GogUser)
	var i TbUserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SteamUser,
		&i.GogUser,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteUserProfile = `-- name: DeleteUserProfile :exec
DELETE FROM tb_user_profiles
WHERE id = $1
`

func (q *Queries) DeleteUserProfile(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteUserProfile, id)
	return err
}

const getAllUserProfiles = `-- name: GetAllUserProfiles :many
SELECT id, user_id, steam_user, gog_user, created_at, updated_at, deleted_at FROM tb_user_profiles
WHERE deleted_at IS NULL
`

func (q *Queries) GetAllUserProfiles(ctx context.Context) ([]TbUserProfile, error) {
	rows, err := q.db.QueryContext(ctx, getAllUserProfiles)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TbUserProfile
	for rows.Next() {
		var i TbUserProfile
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.SteamUser,
			&i.GogUser,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserProfileById = `-- name: GetUserProfileById :one
SELECT id, user_id, steam_user, gog_user, created_at, updated_at, deleted_at FROM tb_user_profiles
WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserProfileById(ctx context.Context, id uuid.UUID) (TbUserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileById, id)
	var i TbUserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SteamUser,
		&i.GogUser,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getUserProfileByUserId = `-- name: GetUserProfileByUserId :one
SELECT id, user_id, steam_user, gog_user, created_at, updated_at, deleted_at FROM tb_user_profiles
WHERE user_id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetUserProfileByUserId(ctx context.Context, userID uuid.UUID) (TbUserProfile, error) {
	row := q.db.QueryRowContext(ctx, getUserProfileByUserId, userID)
	var i TbUserProfile
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.SteamUser,
		&i.GogUser,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :exec
UPDATE tb_user_profiles SET steam_user = $1, gog_user = $2
WHERE id = $3
`

type UpdateUserProfileParams struct {
	SteamUser sql.NullString
	GogUser   sql.NullString
	ID        uuid.UUID
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfile, arg.SteamUser, arg.GogUser, arg.ID)
	return err
}
